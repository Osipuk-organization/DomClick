//
// FlatsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class FlatsAPI {
    /**
     Get all flats
     
     - parameter body: (body) Get all flats 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFlats(body: Flats, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getFlatsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get all flats
     - GET /flats
     - get flats
     
     - parameter body: (body) Get all flats 

     - returns: RequestBuilder<Void> 
     */
    open class func getFlatsWithRequestBuilder(body: Flats) -> RequestBuilder<Void> {
        let path = "/flats"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get one flat
     
     - parameter _id: (path) The name that needs to be fetched. Use user1 for testing.  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOneFlat(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getOneFlatWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get one flat
     - GET /flats/{id}
     - Get one flat
     
     - parameter _id: (path) The name that needs to be fetched. Use user1 for testing.  

     - returns: RequestBuilder<Void> 
     */
    open class func getOneFlatWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/flats/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Put new flat
     
     - parameter body: (body) Put new flat 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putNewFlat(body: Flats, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putNewFlatWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Put new flat
     - POST /flats/add
     - Put new flat
     
     - parameter body: (body) Put new flat 

     - returns: RequestBuilder<Void> 
     */
    open class func putNewFlatWithRequestBuilder(body: Flats) -> RequestBuilder<Void> {
        let path = "/flats/add"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
