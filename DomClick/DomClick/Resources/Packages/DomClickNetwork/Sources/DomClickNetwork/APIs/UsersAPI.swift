//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UsersAPI {
    /**
     Get one users
     
     - parameter _id: (path) The name that needs to be fetched. Use user1 for testing.  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOneUser(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getOneUserWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get one users
     - GET /users/{id}
     - get one user
     
     - parameter _id: (path) The name that needs to be fetched. Use user1 for testing.  

     - returns: RequestBuilder<Void> 
     */
    open class func getOneUserWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/users/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all users
     
     - parameter body: (body) Get all users 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsers(body: Users, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getUsersWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get all users
     - GET /users
     - get users
     
     - parameter body: (body) Get all users 

     - returns: RequestBuilder<Void> 
     */
    open class func getUsersWithRequestBuilder(body: Users) -> RequestBuilder<Void> {
        let path = "/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Put new user
     
     - parameter body: (body) Get all users 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putNewUser(body: Users, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putNewUserWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Put new user
     - POST /users
     - Put new user
     
     - parameter body: (body) Get all users 

     - returns: RequestBuilder<Void> 
     */
    open class func putNewUserWithRequestBuilder(body: Users) -> RequestBuilder<Void> {
        let path = "/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
